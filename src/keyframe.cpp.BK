
// #include <geometry_msgs/PoseStamped.h>
// #include <nav_msgs/Odometry.h>
// #include <nav_msgs/Path.h>
// #include <ros/package.h>
// #include <ros/ros.h>
// #include <sensor_msgs/Imu.h>
// #include <tf/transform_broadcaster.h>

//c++
#include <boost/filesystem.hpp>
#include <csignal>
#include <fstream>
#include <mutex>
#include <thread>
#include <atomic>
#include <chrono>


//ig lio
#include "ig_lio/lio.h"
#include "ig_lio/logger.hpp"
#include "ig_lio/pointcloud_preprocess.h"
#include "ig_lio/timer.h"

//ros2 
#include <rclcpp/rclcpp.hpp>
#include <ament_index_cpp/get_package_share_directory.hpp>
#include <sensor_msgs/msg/imu.hpp>
#include <nav_msgs/msg/odometry.hpp>
#include <nav_msgs/msg/path.hpp>
#include <geometry_msgs/msg/pose_stamped.hpp>
#include <tf2_ros/transform_broadcaster.h>
#include <tf2/LinearMath/Quaternion.h>
#include <pcl_conversions/pcl_conversions.h>
#include <pcl/filters/voxel_grid.h>



namespace fs = boost::filesystem;
constexpr double kAccScale = 9.80665;
// Global flag for clean shutdown
std::atomic<bool> FLAG_EXIT(false);
using std::placeholders::_1;

class IG_LIO_KEYFRAME_NODE : public rclcpp::Node {
public:
  IG_LIO_KEYFRAME_NODE(std::string package_path) : Node("ig_lio_node"){
    // Setup signal handler
    signal(SIGINT, IG_LIO_KEYFRAME_NODE::SigHandle);
    DeclareParams();
    GetParams();
    package_path_ = package_path;
    //Initialize variables 
    Initialize();
    //Register pub/sub
    Topics();




    // Start the loop in a separate thread
    processing_thread_ = std::thread(&IG_LIO_KEYFRAME_NODE::processingLoop, this);
  }

  ~IG_LIO_KEYFRAME_NODE() {
    // Set exit flag and join the thread on destruction
    if (processing_thread_.joinable()) {
        processing_thread_.join();
    }
  }

private:

    static void SigHandle(int sig) {
        FLAG_EXIT.store(true);
        std::cout << "Catch sig " << sig << std::endl;
    }

    void processingLoop() {
        rclcpp::WallRate rate(std::chrono::microseconds(200));
        while (rclcpp::ok() && !FLAG_EXIT.load()) {
            Process(); // Your processing function
            rate.sleep();
        }
        timer.PrintAll();
        rclcpp::shutdown();
    }

    void DeclareParams(){
    // Initialize publishers, subscribers, parameters, etc.
    this->declare_parameter<std::string>("odom/lidar_topic", "velodyne_points");
    this->declare_parameter<std::string>("odom/lidar_type", "velodyne");

    this->declare_parameter<std::string>("odom/odom_frame","odom");
    this->declare_parameter<std::string>("odom/robot_frame","base_link");
    this->declare_parameter<std::string>("odom/lidar_frame","velodyne");
    this->declare_parameter<std::string>("map/map_frame","odom" );

    this->declare_parameter<double>("odom/time_scale", 1000);
    this->declare_parameter<int>("odom/point_filter_num", 6);
    // Declare and get parameters for init LIO
    this->declare_parameter<double>("odom/scan_resolution", 0.5);
    this->declare_parameter<double>("odom/voxel_map_resolution", 0.5);
    this->declare_parameter<int>("odom/max_iterations", 10);
    // Declare and get various covariance and gravity parameters
    this->declare_parameter<double>("odom/acc_cov", 0.1);
    this->declare_parameter<double>("odom/gyr_cov", 0.1);
    this->declare_parameter<double>("odom/ba_cov", 0.000001);
    this->declare_parameter<double>("odom/bg_cov", 0.000001);
    this->declare_parameter<double>("odom/init_ori_cov", 0.0001);
    this->declare_parameter<double>("odom/init_pos_cov", 0.0001);
    this->declare_parameter<double>("odom/init_vel_cov", 100.0);
    this->declare_parameter<double>("odom/init_ba_cov", 0.0001);
    this->declare_parameter<double>("odom/init_bg_cov", 0.0001);
    this->declare_parameter<double>("odom/gravity", 9.80665);

    // Declare and get parameters for GICP constraints, outlier rejection, and others
    this->declare_parameter<double>("odom/gicp_constraints_gain", 100.0);
    this->declare_parameter<double>("odom/point2plane_constraints_gain", 1000.0);
    this->declare_parameter<bool>("odom/enable_undistort", false);
    this->declare_parameter<bool>("odom/enable_outlier_rejection", false);
    this->declare_parameter<bool>("odom/enable_acc_correct", false);
    // Declare and get parameters for min and max radius
    this->declare_parameter<double>("odom/min_radius", 1.0);
    this->declare_parameter<double>("odom/max_radius", 150.0);

    // For vector parameters like extrinsic, it's a bit more complex
    // Declare and get extrinsic parameters (vectors)
    this->declare_parameter<std::vector<double>>("extrinsics/imu2lidar/t", default_t_imu_lidar);
    this->declare_parameter<std::vector<double>>("extrinsics/imu2lidar/r", default_R_imu_lidar);
  }

  void GetParams(){
    this->get_parameter("odom/lidar_frame", lidar_frame);
    this->get_parameter("map/map_frame", map_frame);

    this->get_parameter("odom/time_scale", time_scale);
    this->get_parameter("odom/point_filter_num", point_filter_num);
    this->get_parameter("odom/scan_resolution", scan_resolution);
    this->get_parameter("odom/voxel_map_resolution", voxel_map_resolution);
    this->get_parameter("odom/max_iterations", max_iterations);
    // Retrieve the covariance and gravity parameters
    this->get_parameter("odom/acc_cov", acc_cov);
    this->get_parameter("odom/gyr_cov", gyr_cov);
    this->get_parameter("odom/ba_cov", ba_cov);
    this->get_parameter("odom/bg_cov", bg_cov);
    this->get_parameter("odom/init_ori_cov", init_ori_cov);
    this->get_parameter("odom/init_pos_cov", init_pos_cov);
    this->get_parameter("odom/init_vel_cov", init_vel_cov);
    this->get_parameter("odom/init_ba_cov", init_ba_cov);
    this->get_parameter("odom/init_bg_cov", init_bg_cov);
    this->get_parameter("odom/gravity", gravity);

    this->get_parameter("odom/gicp_constraints_gain", gicp_constraints_gain);
    this->get_parameter("odom/point2plane_constraints_gain", point2plane_constraints_gain);
    this->get_parameter("odom/enable_undistort", enable_undistort);
    this->get_parameter("odom/enable_outlier_rejection", enable_outlier_rejection);
    this->get_parameter("odom/enable_acc_correct", enable_acc_correct);
    this->get_parameter("odom/enable_ahrs_initalization", enable_ahrs_initalization);

    // Retrieve the paramodom/eters as shown previously
    this->get_parameter("odom/min_radius", min_radius);
    this->get_parameter("odom/max_radius", max_radius);

    this->get_parameter("extrinsics/imu2lidar/t", t_imu_lidar_v);
    this->get_parameter("extrinsics/imu2lidar/r", R_imu_lidar_v);
  }

  void Initialize(){
    // 1. pointcloud_preprocess
    // Determine lidar type...
    LOG(INFO) << "time_scale: " << time_scale << std::endl
              << "point_filter_num: " << point_filter_num;
    PointCloudPreprocess::Config cloud_preprocess_config;
    cloud_preprocess_config.lidar_type = lidar_type_;
    cloud_preprocess_config.point_filter_num = point_filter_num;
    cloud_preprocess_config.time_scale = time_scale;
    cloud_preprocess_config.max_radius = max_radius;
    cloud_preprocess_config.min_radius = min_radius;
    cloud_preprocess_ptr =
        std::make_shared<PointCloudPreprocess>(cloud_preprocess_config);

    // 2. init LIO
      LOG(INFO) << "scan_resoultion: " << scan_resolution << std::endl
                << "voxel_map_resolution: " << voxel_map_resolution << std::endl
                << "max_iterations: " << max_iterations << std::endl
                << "acc_cov: " << acc_cov << std::endl
                << "gyr_cov: " << gyr_cov << std::endl
                << "ba_cov: " << ba_cov << std::endl
                << "bg_cov: " << bg_cov << std::endl
                << "gravity: " << gravity << std::endl
                << "init_ori_cov: " << init_ori_cov << std::endl
                << "init_pos_cov: " << init_pos_cov << std::endl
                << "init_vel_cov: " << init_vel_cov << std::endl
                << "init_ba_cov: " << init_ba_cov << std::endl
                << "init_bg_cov: " << init_bg_cov << std::endl
                << "gicp_constraints_gain: " << gicp_constraints_gain << std::endl
                << "point2plane_constraints_gain: " << point2plane_constraints_gain
                << std::endl
                << "enable_undistort: " << enable_undistort << std::endl
                << "enable_acc_correct: " << enable_acc_correct << std::endl
                << "enable_outlier_rejection: " << enable_outlier_rejection
                << std::endl
                << "enable_ahrs_initalization: " << enable_ahrs_initalization
                << std::endl
                << "min_radius: " << min_radius << std::endl
                << "max_radius: " << max_radius;
    // 3. load extrinsic          
    T_identity = Eigen::Matrix4d::Identity();

    LIO::Config lio_config;
    lio_config.acc_cov = acc_cov;
    lio_config.gyr_cov = gyr_cov;
    lio_config.ba_cov = ba_cov;
    lio_config.bg_cov = bg_cov;

    lio_config.gravity = gravity;
    lio_config.init_ori_cov = init_ori_cov;
    lio_config.init_pos_cov = init_pos_cov;
    lio_config.init_vel_cov = init_vel_cov;
    lio_config.init_ba_cov = init_ba_cov;
    lio_config.init_bg_cov = init_bg_cov;

    lio_config.gicp_constraint_gain = gicp_constraints_gain;
    lio_config.point2plane_constraint_gain = point2plane_constraints_gain;
    lio_config.enable_outlier_rejection = enable_outlier_rejection;
    lio_config.enable_undistort = enable_undistort;
    lio_config.max_iterations = max_iterations;
    lio_config.current_scan_resolution = scan_resolution;
    lio_config.voxel_map_resolution = voxel_map_resolution;
    lio_config.min_radius = min_radius;
    lio_config.max_radius = max_radius;

    lio_config.T_imu_lidar = T_identity;

    lio_ptr = std::make_shared<LIO>(lio_config);

    voxel_filter.setLeafSize(0.5, 0.5, 0.5);

    LOG(INFO) << "Done initializing variables " << std::endl;
  }


  void Topics(){

    // Setup subscribers
    submap_sub_ = this->create_subscription<sensor_msgs::msg::PointCloud2>(
    "submap", 10, std::bind(&IG_LIO_KEYFRAME_NODE::CloudCallBack, this, std::placeholders::_1));


    // Setup publishers
    current_scan_pub_ = this->create_publisher<sensor_msgs::msg::PointCloud2>("/submap/current_scan", 10);
    keyframe_scan_pub_ = this->create_publisher<sensor_msgs::msg::PointCloud2>("/usbmap/keyframe_scan", 10);
    LOG(INFO) << "Done setting pub/sub" << std::endl;
  }



    //process Velodyne and Outser
    void CloudCallBack(const sensor_msgs::msg::PointCloud2::SharedPtr msg) {
        static double last_lidar_timestamp = 0.0;
        timer.Evaluate(
            [&]() {
                lidar_timestamp = msg->header.stamp.sec + msg->header.stamp.nanosec * 1e-9;

                CloudPtr cloud_ptr(new CloudType());
                cloud_preprocess_ptr->Process(msg, cloud_ptr);

                {
                std::lock_guard<std::mutex> lock(buff_mutex);

                if (lidar_timestamp < last_lidar_timestamp) {
                    LOG(WARNING) << "lidar loop back, clear buffer";
                    cloud_buff.clear();
                }
                last_lidar_timestamp = lidar_timestamp;

                cloud_buff.push_back(
                    std::make_pair(msg->header.stamp.sec + msg->header.stamp.nanosec * 1e-9, cloud_ptr));
                }

                // LOG(INFO) << "lidar buff size: " << cloud_buff.size();
            },
            "Cloud Preprocess (Standard)");
    }

    // // process livox

    void LivoxCloudCallBack(const livox_ros_driver2::msg::CustomMsg::SharedPtr msg) {
        static double last_lidar_timestamp = 0.0;
        static CloudPtr temp_cloud_ptr(new CloudType());
        static bool first_scan_flag = true;
        static double first_scan_timestamp = 0.0;

        timer.Evaluate(
            [&]() {
                lidar_timestamp = msg->header.stamp.sec + msg->header.stamp.nanosec * 1e-9;


                {
                std::lock_guard<std::mutex> lock(buff_mutex);

                // prevent timestamp disorder
                if (lidar_timestamp < last_lidar_timestamp) {
                    LOG(WARNING) << "lidar loop back, clear buffer";
                    cloud_buff.clear();
                    last_lidar_timestamp = lidar_timestamp;
                }

                if (first_scan_flag) {
                    first_scan_timestamp = lidar_timestamp;
                    first_scan_flag = false;
                }

                cloud_preprocess_ptr->Process(
                    msg, temp_cloud_ptr, first_scan_timestamp);

                first_scan_flag = true;
                last_lidar_timestamp = lidar_timestamp;

                CloudPtr cloud_ptr(new CloudType(*temp_cloud_ptr));
                cloud_buff.push_back(std::make_pair(first_scan_timestamp, cloud_ptr));
                temp_cloud_ptr->clear();
                }
            },
            "Cloud Preprocess (Livox)");
    }




    bool SyncMeasurements() {
        static bool measurement_pushed = false;
        static bool process_lidar = false;
        static SensorMeasurement local_sensor_measurement;
        static double lidar_mean_scantime = 0.0;
        static size_t lidar_scan_num = 0;

        if (cloud_buff.empty()) {
            return false;
        }

        std::lock_guard<std::mutex> lock(buff_mutex);

        double lidar_end_time = 0.0;
        if (!measurement_pushed) {
            if (!process_lidar) {
            CloudPtr cloud_sort(new CloudType());
            *cloud_sort = *cloud_buff.front().second;
            std::sort(cloud_sort->points.begin(),
                        cloud_sort->points.end(),
                        [](const PointType& x, const PointType& y) -> bool {
                        return (x.curvature < y.curvature);
                        });
            local_sensor_measurement.cloud_ptr_ = cloud_sort;
            local_sensor_measurement.bag_time_ = cloud_buff.front().first;
            if (!local_sensor_measurement.cloud_ptr_->points.empty()) {
                local_sensor_measurement.lidar_start_time_ =
                    cloud_buff.front().first +
                    local_sensor_measurement.cloud_ptr_->points.front().curvature /
                        (double)(1000);
            } else {
                local_sensor_measurement.lidar_start_time_ = cloud_buff.front().first;
            }

            if (local_sensor_measurement.cloud_ptr_->size() <= 1) {
                LOG(WARNING) << "Too Few Points in Cloud!!!" << std::endl;
                lidar_end_time =
                    local_sensor_measurement.lidar_start_time_ + lidar_mean_scantime;
            } else if (local_sensor_measurement.cloud_ptr_->points.back().curvature /
                            (double)(1000) <
                        0.5 * lidar_mean_scantime) {
                lidar_end_time =
                    local_sensor_measurement.lidar_start_time_ + lidar_mean_scantime;
            } else {
                lidar_scan_num++;
                lidar_end_time =
                    local_sensor_measurement.bag_time_ +
                    local_sensor_measurement.cloud_ptr_->points.back().curvature /
                        (double)(1000);
                lidar_mean_scantime +=
                    ((local_sensor_measurement.cloud_ptr_->points.back().curvature -
                    local_sensor_measurement.cloud_ptr_->points.front().curvature) /
                        (double)(1000) -
                    lidar_mean_scantime) /
                    (double)(lidar_scan_num);
            }

            if (enable_undistort) {
                local_sensor_measurement.lidar_end_time_ = lidar_end_time;
            } else {
                local_sensor_measurement.lidar_end_time_ =
                    local_sensor_measurement.bag_time_;
            }

                process_lidar = true;
            }

            sensor_measurement = local_sensor_measurement;
            measurement_pushed = true;
            cloud_buff.pop_front();
            process_lidar = false;
        }
        measurement_pushed = false;
        return true;
    }

    void Process(){
        // Step 1: Time synchronization
        if (!SyncMeasurements()) {
            return;
        }
        // Too little points for measurement update!
        if (sensor_measurement.cloud_ptr_->size() <= 1) {
            LOG(WARNING) << "no point, skip this scan";
            return;
        }

        // Setp 4: Measurement Update
        timer.Evaluate([&] { lio_ptr->MeasurementUpdateForReloc(sensor_measurement); },
                        "measurement update");
            // // Setp 5: Send to rviz for visualization
            Eigen::Matrix4d result_pose = lio_ptr->GetCurrentPose();
            auto nanosec_part = static_cast<uint32_t>((sensor_measurement.lidar_end_time_ - static_cast<uint64_t>(sensor_measurement.lidar_end_time_)) * 1e9);
            auto sec_part = static_cast<int32_t>(sensor_measurement.lidar_end_time_);
            // publish dense scan
            CloudPtr trans_cloud(new CloudType());
            pcl::transformPointCloud(
                *sensor_measurement.cloud_ptr_, *trans_cloud, result_pose);
            sensor_msgs::msg::PointCloud2 scan_msg;
            pcl::toROSMsg(*trans_cloud, scan_msg);
            scan_msg.header.frame_id = this->odom_frame;
            scan_msg.header.stamp.sec = sec_part;
            scan_msg.header.stamp.nanosec = nanosec_part;
            current_scan_pub_->publish(scan_msg);

            // // publish downsample scan
            CloudPtr cloud_DS(new CloudType());
            voxel_filter.setInputCloud(sensor_measurement.cloud_ptr_);
            voxel_filter.filter(*cloud_DS);
            CloudPtr trans_cloud_DS(new CloudType());
            pcl::transformPointCloud(*cloud_DS, *trans_cloud_DS, result_pose);
            sensor_msgs::msg::PointCloud2 keyframe_scan_msg;
            pcl::toROSMsg(*trans_cloud_DS, keyframe_scan_msg);
            keyframe_scan_msg.header.frame_id = this->odom_frame;
            keyframe_scan_msg.header.stamp = scan_msg.header.stamp;
            keyframe_scan_pub_->publish(keyframe_scan_msg);
    }

  // Subscribers
  rclcpp::Subscription<livox_ros_driver2::msg::CustomMsg>::SharedPtr livox_sub_;
  rclcpp::Subscription<sensor_msgs::msg::PointCloud2>::SharedPtr submap_sub_;


  // Publishers

  rclcpp::Publisher<sensor_msgs::msg::PointCloud2>::SharedPtr current_scan_pub_;
  rclcpp::Publisher<sensor_msgs::msg::PointCloud2>::SharedPtr keyframe_scan_pub_;

  // Parameters
  std::string lidar_topic;
  std::string odom_frame;
  std::string robot_frame;
  std::string lidar_frame;
  std::string map_frame;
  LidarType lidar_type_ = LidarType::VELODYNE;
  bool enable_acc_correct;
  bool enable_undistort;
  bool enable_ahrs_initalization;
  Eigen::Matrix4d T_identity;

  // parameters used to synchronize livox time with the external imu
  double lidar_timestamp = 0.0;
  bool timediff_correct_flag;
  double acc_cov, gyr_cov, bg_cov, ba_cov, init_ori_cov, init_pos_cov,
      init_vel_cov, init_ba_cov, init_bg_cov, gravity;
  std::mutex buff_mutex;
  double time_scale;
  int point_filter_num;
  double gicp_constraints_gain;
  double point2plane_constraints_gain;
  bool enable_outlier_rejection;
  
  double scan_resolution, voxel_map_resolution;
  int max_iterations;
  double min_radius, max_radius;
  // data deque
  std::deque<std::pair<double, pcl::PointCloud<PointType>::Ptr>> cloud_buff;
  std::vector<double> t_imu_lidar_v, R_imu_lidar_v; 
  std::vector<double> robot2imu_t, robot2imu_r, robot2lidar_t, robot2lidar_r; 
  std::string package_path_;
  // Set default values for t_imu_lidar and R_imu_lidar
  std::vector<double> default_t_imu_lidar = {0.0, 0.0, 0.0};
  std::vector<double> default_R_imu_lidar = {1.0, 0.0, 0.0,  // First row of identity matrix
                                            0.0, 1.0, 0.0,  // Second row
                                            0.0, 0.0, 1.0}; // Third row

  Timer timer;
  std::shared_ptr<PointCloudPreprocess> cloud_preprocess_ptr;
  SensorMeasurement sensor_measurement;
  std::shared_ptr<LIO> lio_ptr;
  pcl::VoxelGrid<PointType> voxel_filter;
  // LIO and other related objects
  std::shared_ptr<LIO> lio_ptr_;
  std::shared_ptr<PointCloudPreprocess> cloud_preprocess_ptr_;
  
  std::thread processing_thread_;
  struct Extrinsics {
    struct SE3 {
      Eigen::Vector3f t;
      Eigen::Matrix3f R;
    };
    SE3 robot2imu;
    SE3 robot2lidar;
    Eigen::Matrix4f robot2imu_T;
    Eigen::Matrix4f robot2lidar_T;
  }; Extrinsics extrinsics;
};
  

int main(int argc, char **argv) {
  rclcpp::init(argc, argv);
  std::string package_path = ament_index_cpp::get_package_share_directory("ig_lio");
  Logger logger(argv, package_path);
  auto node = std::make_shared<IG_LIO_KEYFRAME_NODE>(package_path);
  rclcpp::spin(node);
  rclcpp::shutdown();
  return 0;
}